import React, { Component } from 'react';
import { Dialog, FormGroup, InputGroup, Button, Intent } from '@blueprintjs/core';
import { Suggest } from '@blueprintjs/select';
import {Grid, Row, Col} from 'react-flexbox-grid';
import { filmSelectProps, IFilm } from './films';
// import { handleStringChange } from "@blueprintjs/docs-theme";

const FilmSuggest = Suggest.ofType<IFilm>();

type propTypes = {
    isOpen: boolean;
    changeOpen: (stateName: string, isOpen: boolean ) => void;
};
export interface ISuggestExampleState {
    type: IFilm | null;
    loading: boolean;
    showPassword: boolean;
    name: string ;
    url: string ;
    username: string ;
    password: string ;
}
const code = 'isDatabaseManage';
const initState = {
    type: null,
    loading: false,
    showPassword: false,
    name: '',
    url: '',
    username: '',
    password: '',
};
class DatabaseManageDialog extends Component<propTypes, ISuggestExampleState> {
    public state: ISuggestExampleState = {...initState};
    renderInputValue = (type: IFilm) => type.title;
    // @ts-ignore
    handleValueChange = (stateType: string, param: IFilm | string) => this.setState({ [stateType]: param  });
    handleLockClick = () => this.setState({ showPassword: !this.state.showPassword });
    closeDialog = () => {
        const {changeOpen} = this.props;
        changeOpen(code, false);
        this.setState(initState);
    };
    render() {
        const {isOpen} = this.props;
        const {loading, showPassword, type, name, url, username, password } = this.state;
        const lockButton = (
                <Button
                    icon={showPassword ? 'unlock' : 'lock'}
                    intent={Intent.WARNING}
                    minimal={true}
                    onClick={this.handleLockClick}
                />
        );
        return (
            <Dialog className={'dialog'} isOpen={isOpen} onClose={this.closeDialog} icon="database" title="新建数据库" canOutsideClickClose={false}>
                <div className={'bp3-dialog-body'}>
                    <Grid fluid={true} >
                        <Row>
                            <Col lg={6} key={'name'}>
                                <FormGroup
                                    inline={true}
                                    label={<div style={{width: 60}} >名称&nbsp;:</div>}
                                    labelFor="text-input"
                                >
                                    <InputGroup value={name} onChange={(param: React.FormEvent<HTMLInputElement>) => this.handleValueChange('name', param.currentTarget.value)} small={true} placeholder="必填" />
                                </FormGroup>
                            </Col>
                            <Col lg={6} key={'type'}>
                                <FormGroup
                                    inline={true}
                                    label={<div style={{width: 60}} >类型&nbsp;:</div>}
                                    labelFor="text-input"
                                >
                                    <FilmSuggest selectedItem={type} {...filmSelectProps} inputValueRenderer={this.renderInputValue} onItemSelect={(param) => this.handleValueChange('type', param)} popoverProps={{ minimal: true }} />
                                </FormGroup>
                            </Col>
                            <Col lg={12} key={'url'}>
                                <FormGroup
                                    inline={true}
                                    label={<div style={{width: 60}} >地址&nbsp;:</div>}
                                    labelFor="text-input"
                                >
                                    <InputGroup value={url} style={{width: 440}} small={true}  placeholder="例如:jdbc:oracle:thin:@127.0.0.1:1521:orcl, 默认使用JDBC协议, 必填"  onChange={(param: React.FormEvent<HTMLInputElement>) => this.handleValueChange('url', param.currentTarget.value)} />
                                </FormGroup>
                            </Col>
                            <Col lg={6} key={'username'}>
                                <FormGroup
                                    inline={true}
                                    label={<div style={{width: 60}} >用户&nbsp;:</div>}
                                    labelFor="text-input"
                                >
                                    <InputGroup value={username} small={true}  placeholder="必填" onChange={(param: React.FormEvent<HTMLInputElement>) => this.handleValueChange('username', param.currentTarget.value)}  />
                                </FormGroup>
                            </Col>
                            <Col lg={6} key={'password'}>
                                <FormGroup
                                    inline={true}
                                    label={<div style={{width: 60}} >密码&nbsp;:</div>}
                                    labelFor="password-input"
                                >
                                    <InputGroup value={password} small={true} rightElement={lockButton}  type={showPassword ? 'text' : 'password'}  placeholder="必填"  onChange={(param: React.FormEvent<HTMLInputElement>) => this.handleValueChange('password', param.currentTarget.value)} />
                                </FormGroup>
                            </Col>
                        </Row>
                    </Grid>
                </div>
                <div className={'bp3-dialog-footer'}>
                    <div className="bp3-dialog-footer-actions">
                        <Button text={'检测'} loading={loading}/>
                        <Button text={'取消'} onClick={this.closeDialog} />
                        <Button intent={Intent.PRIMARY} text={'确定'} />
                    </div>
                </div>
            </Dialog>
        );
    }
}
export default DatabaseManageDialog;

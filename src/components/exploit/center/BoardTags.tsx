import React, { Component } from 'react';
import '../../../styles/exploit.scss';
import {List} from 'immutable';
import {Icon} from '@blueprintjs/core';
import classNames from 'classnames';
import BoardTag from './BoardTag';

type propTypes = {
    rightWidth: number;
    boardList: List< any>;
    activeBoardId: string | null;
    transformX: number;
    flowTransformX: (transformX: number) => void;
    switchActiveBoardId: (activeBoardId: string) => void;
    updateBoardList: (boardList: List<any>) => void;
};
type stateTypes = {
    boardList: List< any>;
    activeBoardId: string | null;
    rightWidth: number;
};

class BoardTags extends Component<propTypes, stateTypes> {
    // @ts-ignore
    get componentWillReceiveProps(): (nextProps: propTypes) => void {
        return this._componentWillReceiveProps;
    }

    set componentWillReceiveProps(value: (nextProps: propTypes) => void) {
        this._componentWillReceiveProps = value;
    }
    constructor(props: propTypes) {
        super(props);
        const {boardList, activeBoardId, rightWidth} = this.props;
        this.state = { boardList: boardList, activeBoardId: activeBoardId, rightWidth: rightWidth };
    }

    componentDidMount() {
        const {boardList, activeBoardId, rightWidth} = this.props;
        this.calculateFlow(boardList, activeBoardId, rightWidth);
    }
    public _componentWillReceiveProps = (nextProps: propTypes) => {
        const {boardList, activeBoardId, rightWidth} = this.state;
        if (nextProps.boardList !== boardList || nextProps.activeBoardId !== activeBoardId || nextProps.rightWidth !== rightWidth) {
            this.calculateFlow(nextProps.boardList, nextProps.activeBoardId, nextProps.rightWidth);
        }
    };

    flowRight = () => {
        const {flowTransformX, boardList, rightWidth} = this.props;
        const transformX = 140 * boardList.size - (rightWidth - 18 * 2);
        flowTransformX(transformX);
    };

    flowLeft = () => {
        const {flowTransformX} = this.props;
        flowTransformX(0);
    };

    calculateFlow = (boardList: List<any>, activeBoardId: string | null, rightWidth: number) => {
        const {flowTransformX} = this.props;
        const boardIds: string [] = [];
        if ( activeBoardId ) {
            boardList.map((tag) => {
                boardIds.push(tag.id);
            });
            const index = boardIds.indexOf(activeBoardId);
            const transformX = 140 * (index + 1) - (rightWidth - 18 * 2 );
            if (transformX > 0 ) {
                flowTransformX(transformX);
            } else {
                flowTransformX(0);
            }
        }
        this.setState({boardList: boardList, activeBoardId: activeBoardId, rightWidth: rightWidth});
    };

    render() {
        const {rightWidth, boardList, activeBoardId, transformX, switchActiveBoardId, updateBoardList} = this.props;
        const tabWidth = 140;
        const needScroll = (boardList.size * tabWidth) > (rightWidth - 40);
        const canFlowRight = (boardList.size * tabWidth - (rightWidth - 18 * 2)) === transformX;
        return (
            <div className={'board-tags'} style={{width: rightWidth}}>
                {needScroll ? <span onClick={this.flowLeft} className={classNames('tabs-tab-prev', {disabled: transformX === 0})} ><Icon icon={'chevron-left'}/></span> : null}
                {needScroll ? <span onClick={this.flowRight} className={classNames('tabs-tab-next', {disabled: canFlowRight})} ><Icon icon={'chevron-right'}/></span> : null}
                <div style={{width: rightWidth - 36}} className={classNames('board-tabs-scroll', {hasScroller: needScroll})}>
                    <div className={'board-tab-wrapper'} style={{transform: `translate3d(-${transformX}px, 0px, 0px)`}}>
                        {boardList.map((tag) => {
                            return <BoardTag key={tag.id} switchActiveBoardId={switchActiveBoardId} tag={tag} boardList={boardList} updateBoardList={updateBoardList} className={classNames({active: tag.id === activeBoardId})}/>;
                            })}
                    </div>
                </div>
        </div>);
    }
}
export default BoardTags;

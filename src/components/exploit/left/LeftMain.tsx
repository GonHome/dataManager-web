import React, { Component } from 'react';
import { Classes, Tree, ITreeNode, ButtonGroup, Button, Popover, Position, PopoverInteractionKind, Menu, MenuItem, ContextMenu, Icon, InputGroup, Intent} from '@blueprintjs/core';
import * as exploitTypes from '../../../models/exploit';
import LeftAddMenu from './LeftAddMenu';
import classNames from 'classnames';
import {List} from 'immutable';
type propTypes = {
    height: number;
    leftMainWidth: number;
    leftData: List<exploitTypes.leftData>;
    expandLeftMenu: (leftData: List<exploitTypes.leftData>) => void;
};

export interface ITreeExampleState {
    showSearch: boolean;
}

const firstRightMenu = (
    <Menu>
        <MenuItem text={'新建离线任务'} />
        <MenuItem text={'删除工作流'} />
        <MenuItem text={'重命名'} />
    </Menu>);
const secondRightMenu = (
    <Menu>
        <MenuItem text={'新建目录'} />
        <MenuItem text={'新建离线任务'} />
    </Menu>);

const showName = (name: string, id: string) => {
    return (
        <div>
            {name}
            <div className={'tree-right'}>
                <Popover content={id ? secondRightMenu : firstRightMenu} position={Position.RIGHT} interactionKind={PopoverInteractionKind.HOVER}>
                    <Icon title="操作" className={'more'} icon={'more'}/>
                </Popover>
            </div>
        </div>);
};

const LOOP_DATA: any = (data: List<exploitTypes.leftData> , id: string) => data.map((item: exploitTypes.leftData, index) => {
    // @ts-ignore
    return {id: id ? `${id}-${index}` : index + '', icon: (<Icon className={'tree-icon'} style={item.color ? {color: item.color} : {color: '#5c7080'}} icon={item.icon} />)
        , hasCaret: true, isExpanded: item.isExpanded
        , label: showName(item.name, id), childNodes: LOOP_DATA(item.children, index + '') };
});

class LeftMain extends Component<propTypes, ITreeExampleState> {

    constructor(props: propTypes) {
        super(props);
        this.state = {showSearch: false};
    }

    handleNodeContextMenu = (nodeData: ITreeNode, _nodePath: number[] , e: React.MouseEvent<HTMLElement>) => {
        const idLength = (nodeData.id + '').split('-').length;
        ContextMenu.show(
            idLength === 1 ? firstRightMenu : secondRightMenu,
            {left: e.clientX, top: e.clientY}
        );
        e.preventDefault();
        e.stopPropagation();
    };

    handleNodeExpand = (nodeData: ITreeNode, _nodePath: number[]) => {
        const {leftData, expandLeftMenu} = this.props;
        const paths = _nodePath.join(',children,').split(',');
        const newLeftData = leftData.updateIn([...paths, 'isExpanded'], value => true);
        expandLeftMenu(newLeftData);
    };

    handleNodeCollapse = (nodeData: ITreeNode, _nodePath: number[]) => {
        const {leftData, expandLeftMenu} = this.props;
        const paths = _nodePath.join(',children,').split(',');
        const newLeftData = leftData.updateIn([...paths, 'isExpanded'], value => false);
        expandLeftMenu(newLeftData);
    };

    render() {
        const {height, leftMainWidth} = this.props;
        const {showSearch} = this.state;
        const lockButton = (
            <Button
                icon={'search'}
                intent={Intent.PRIMARY}
                minimal={true}
            />
        );
        return (
            <div className={'left-main'} style={{height, width: leftMainWidth}}>
                <ButtonGroup className={'button-right'} style={showSearch ? {display: 'none'} : {display: 'inline'}}>
                    <Button small={true}  className={Classes.MINIMAL} icon={'refresh'} title={'刷新'} />
                    <Popover modifiers={{arrow: {enabled: false}}} content={<LeftAddMenu />} position={Position.BOTTOM} interactionKind={PopoverInteractionKind.HOVER}>
                        <Button small={true} className={Classes.MINIMAL} icon={'add'} />
                    </Popover>
                    <Button small={true} className={Classes.MINIMAL} icon={'search'} title={'查询'} onClick={() => this.setState({showSearch: true})}  />
                </ButtonGroup>
                <div  className={classNames({ 'input-right': true, 'active': showSearch})}>
                    <InputGroup  onBlur={() => this.setState({showSearch: false})} placeholder="搜索条件" small={true} rightElement={lockButton} type={'text'}/>
                </div>
                <div style={{marginTop: 30}}>
                    <Tree
                        contents={LOOP_DATA(this.props.leftData, '')._tail.array}
                        className={Classes.ELEVATION_0}
                        // onNodeClick={this.handleNodeClick}
                        onNodeExpand={this.handleNodeExpand}
                        onNodeCollapse={this.handleNodeCollapse}
                        onNodeContextMenu={this.handleNodeContextMenu}
                    />
                </div>
        </div>);
    }
}
export default LeftMain;

import React, { Component } from 'react';
import { Classes, Tree, ITreeNode, ButtonGroup, Button, Popover, Position, PopoverInteractionKind, Menu, MenuItem, ContextMenu, Icon } from '@blueprintjs/core';
import * as exploitTypes from '../../../models/exploit';
import LeftAddMenu from './LeftAddMenu';
type propTypes = {
    height: number;
    leftMainWidth: number;
    leftData: exploitTypes.leftData [];
};

export interface ITreeExampleState {
    nodes: ITreeNode[];
}

const firstRightMenu = (
    <Menu>
        <MenuItem text={'新建离线任务'} />
        <MenuItem text={'删除工作流'} />
        <MenuItem text={'重命名'} />
    </Menu>);
const secondRightMenu = (
    <Menu>
        <MenuItem text={'新建目录'} />
        <MenuItem text={'新建离线任务'} />
    </Menu>);

const showName = (name: string, id: string) => {
    return (
        <div>
            {name}
            <div className={'tree-right'}>
                <Popover content={id ? secondRightMenu : firstRightMenu} position={Position.RIGHT} interactionKind={PopoverInteractionKind.HOVER}>
                    <Icon title="操作" className={'more'} icon={'more'}/>
                </Popover>
            </div>
        </div>);
};

const LOOP_DATA: any = (data: exploitTypes.leftData [] , id: string) => data.map((item: exploitTypes.leftData, index) => {
    return {id: id ? `${id}-${index}` : index + '', hasCaret: true, isExpanded: item.isExpanded, icon: item.icon, label: showName(item.name, id), childNodes: LOOP_DATA(item.children, index + '') };
});

class LeftMain extends Component<propTypes, ITreeExampleState> {
    public state: ITreeExampleState = { nodes: LOOP_DATA(this.props.leftData, '') };

    handleNodeExpand = (nodeData: ITreeNode) => {
        nodeData.isExpanded = true;
        this.setState(this.state);
    };

    handleNodeCollapse = (nodeData: ITreeNode) => {
        nodeData.isExpanded = false;
        this.setState(this.state);
    };

    forEachNode(nodes: ITreeNode[], callback: (node: ITreeNode) => void) {
        if (nodes == null) {
            return;
        }
        for (const node of nodes) {
            callback(node);
            if ( node.childNodes ) {
                this.forEachNode(node.childNodes, callback);
            }
        }
    }

    handleNodeClick = (nodeData: ITreeNode, _nodePath: number[], e: React.MouseEvent<HTMLElement>) => {
        const originallySelected = nodeData.isSelected;
        if (!e.shiftKey) {
            this.forEachNode(this.state.nodes, n => (n.isSelected = false));
        }
        nodeData.isSelected = originallySelected == null ? true : !originallySelected;
        this.setState(this.state);
    };

    handleNodeContextMenu = (nodeData: ITreeNode, _nodePath: number[] , e: React.MouseEvent<HTMLElement>) => {
        const idLength = (nodeData.id + '').split('-').length;
        ContextMenu.show(
            idLength === 1 ? firstRightMenu : secondRightMenu,
            {left: e.clientX, top: e.clientY}
        );
        e.preventDefault();
        e.stopPropagation();
    };

    render() {
        const {height, leftMainWidth} = this.props;
        return (
            <div className={'left-main'} style={{height, width: leftMainWidth}}>
                <ButtonGroup className={'button-right'}>
                    <Button  className={Classes.MINIMAL} icon={'refresh'} title={'刷新'} />
                    <Popover modifiers={{arrow: {enabled: false}}} content={<LeftAddMenu />} position={Position.BOTTOM} interactionKind={PopoverInteractionKind.HOVER}>
                        <Button  className={Classes.MINIMAL} icon={'add'} />
                    </Popover>
                    <Button  className={Classes.MINIMAL} icon={'search'} title={'查询'}  />
                </ButtonGroup>
                <Tree
                    contents={this.state.nodes}
                    className={Classes.ELEVATION_0}
                    onNodeClick={this.handleNodeClick}
                    onNodeExpand={this.handleNodeExpand}
                    onNodeCollapse={this.handleNodeCollapse}
                    onNodeContextMenu={this.handleNodeContextMenu}
                />
        </div>);
    }
}
export default LeftMain;

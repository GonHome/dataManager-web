import {ActionType, getType} from 'typesafe-actions';
import * as exploitActions from '../actions/ExploitActions';
import * as ExploitConstants from '../constants/ExploitConstants';
import update from 'immutability-helper';
export type actionTypes = ActionType<typeof exploitActions>;

const initialState = {
    leftMenu: ExploitConstants.LEFT_MENU_LIST,
    leftSwitch: ExploitConstants.LEFT_MENU_LIST[0].code,
    leftData: {
        OfflineTask: [{name: '默认工作流', icon: 'diagram-tree', isExpanded: true, color: '#4c89b9', children: ExploitConstants.WORK_FLOW_DEMO }],
        TableManage: [{name: '默认数据库', icon: 'database', isExpanded: true, color: '#4c89b9', children: [ExploitConstants.TABLE_DEMO] }],
        FunctionRule: [{name: '清洗规则', icon: 'function', isExpanded: true, color: '#4c89b9', children: ExploitConstants.CLEAR_FUNCTION }],
    },
    boardMap: {},
    activeBoardId: null,
    transformX: 0,
};

const exploit = (state = initialState, action: actionTypes) => {
    switch (action.type) {
        case getType(exploitActions.switchLeftMenu):
            return {...state, leftSwitch: action.leftSwitch};
        case getType(exploitActions.expandLeftMenu):
            return update(state, {
                leftData: {
                    [action.leftSwitch]: {
                        $set: action.leftData,
                    },
                },
            });
        case getType(exploitActions.switchBoardMap):
            return update(state, {
                boardMap: {
                    [action.activeBoardId]: {
                        $set: action.boardData,
                    },
                },
                activeBoardId: {
                    $set: action.activeBoardId,
                },
            });
        case getType(exploitActions.flowTransformX):
            return {...state, transformX: action.transformX};
        case getType(exploitActions.switchActiveBoardId):
            return {...state, activeBoardId: action.activeBoardId};
        case getType(exploitActions.updateBoardMap):
            return {...state, boardMap: action.boardMap};
        default:
            return state;
    }
};

export default exploit;
